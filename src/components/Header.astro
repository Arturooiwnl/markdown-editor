---
import LoginButton from "../components/auth/Login";

interface Props {
	actualPage?: string;
}

const { actualPage = '/' } = Astro.props;

const NAVIGATIONS = [
    { 
        name: 'Inicio', 
        href: actualPage === '/editor' ? '/' : '#inicio', 
        label: 'inicio' 
    },
    { 
        name: 'Editores', 
        href: actualPage === '/editor' ? '/#editores' : '#editores', 
        label: 'editores' 
    },
    { 
        name: 'FAQ', 
        href: actualPage === '/editor' ? '/#faq' : '#faq', 
        label: 'faq' 
    },
    { 
        name: 'Changelog', 
        href: actualPage === '/editor' ? '/changelog' : '#changelog', 
        label: 'changelog' 
    },
];

---

<header class="rounded-b-md dark:text-gray-50 relative z-70 w-full">
	<div class="navbar-content animate-fade-down animate-duration-700 bg-gradient-to-r from-slate-950/80 via-slate-900/80 to-slate-950/80 shadow-lg shadow-slate-900/20 fixed top-0 left-1/2 -translate-x-1/2 container mx-auto flex justify-between items-center px-7 py-4 rounded-none sm:rounded-b-2xl backdrop-blur-md border-b border-slate-800/30">
		<div class="flex items-center text-whit mt-3 sm:mt-1">
			<img class="h-10 w-10 sm:h-12 sm:w-12" src="/icon.webp" alt="logo de KingStudios y de Arturoiwnl">
		</div>
		<nav class="navbar-desktop">
            <ul class="hidden sm:flex justify-start items-center mt-3 gap-5 text-sm">
                {NAVIGATIONS.map((nav) => (
                    <li>
                    <a href={nav.href} class="relative inline-block text-white group overflow-hidden py-2">
                        <span class="relative z-30 text-gray-100 transition-all duration-300 px-2 group-hover:text-white">
                        {nav.name}
                        </span>
                        <span aria-label={nav.label} class="absolute inset-0 bg-gradient-to-r from-blue-600 to-violet-600 translate-y-[101%] group-hover:translate-y-0 transition-transform duration-300 rounded-lg"></span>
                    </a>
                    </li>
                ))}
            </ul>
		</nav>

        <div tabindex="0" class="sm:hidden mt-3">
            <button role="button" aria-label="Abrir o cerrar menu Hamburgesa" id="hamburger-menu" class="group cursor-pointer flex flex-col justify-center items-center w-10 h-10 border border-slate-700 rounded-md transition-all duration-300 hover:border-blue-500">
                <span class="line1 block w-6 h-0.5 bg-gradient-to-r from-blue-400 to-violet-400 mb-1 transform transition-all duration-300 origin-center"></span>
                <span class="line2 block w-6 h-0.5 bg-gradient-to-r from-blue-400 to-violet-400 mb-1 transition-all duration-300"></span>
                <span class="line3 block w-6 h-0.5 bg-gradient-to-r from-blue-400 to-violet-400 transform transition-all duration-300 origin-center"></span>
            </button>
        </div>

    <nav class="flex sm:hidden fixed bottom-[-175px] left-0 w-full z-50 bg-gradient-to-b from-slate-950/95 to-slate-900/95 backdrop-blur-lg"> 
        <ul id="mobile-menu" class="w-full hidden flex-col items-start gap-8 text-lg border-t border-slate-800/30 shadow-lg p-5">
            {NAVIGATIONS.map((nav) => (
                    <li class="mb-1 w-full">
                    <a aria-label={`${nav.name}`} href={nav.href} class="relative inline-block text-white group w-full">
                        <span class="text-gray-100 transition-all duration-300 flex items-center gap-2 group-hover:translate-x-2">
                            <span class="h-1 w-5 bg-gradient-to-r from-blue-500 to-violet-500 rounded-full transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"></span>
                            {nav.name}
                        </span>
                    </a>
                    </li>
            ))}
        </ul>
    </nav>
		<div class="group mt-2">

      <LoginButton client:load/>

		</div>
	</div>
</header>

<style>
    .title-gradient-text {
        background: linear-gradient(to right, #60A5FA, #A78BFA);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    #hamburger-menu.open .line1 {
        transform: rotate(45deg) translateY(8px);
        margin-left: 10px;
        background: linear-gradient(to right, #3B82F6, #7C3AED);
    }
    #hamburger-menu.open .line2 {
        opacity: 0;
    }
    #hamburger-menu.open .line3 {
        transform: rotate(-45deg) translateY(-8px);
        margin-left: 10px;
        background: linear-gradient(to right, #3B82F6, #7C3AED);
    }
</style>


<script is:inline>

    


    const hamburgerMenu = document.getElementById('hamburger-menu');
    const mobileMenu = document.getElementById('mobile-menu');
    const navigationLinks = mobileMenu.querySelectorAll('a');

    // Función para manejar la visibilidad de las secciones y actualizar el footer
    function handleSectionVisibility(targetSection) {
        const sections = document.querySelectorAll('section');
        const footer = document.querySelector('.footer');
        const isChangelog = targetSection === 'changelog';

        // Actualizar el ID del footer
        if (footer) {
            // Verificar si hay alguna sección visible
            const hasVisibleSection = Array.from(sections).some(section => 
                !section.classList.contains('hidden') && section.id !== 'changelog'
            );

            // Si no hay sección visible o estamos en changelog, asignar el ID correspondiente
            footer.id = isChangelog ? 'changelog' : (hasVisibleSection ? section.id : 'faq');
        }

        sections.forEach(section => {
            if (isChangelog) {
                // changelog = ocultar todo
                if (section.id !== 'changelog') {
                    section.classList.add('hidden');
                } else {
                    section.classList.remove('hidden');
                }
            } else {
                // != changelog = ocultar changelog
                if (section.id === 'changelog') {
                    section.classList.add('hidden');
                } else {
                    section.classList.remove('hidden');
                }
            }
        });
    }

    // Verificar el estado inicial del footer
    document.addEventListener('DOMContentLoaded', () => {
        const footer = document.querySelector('.footer');
        const sections = document.querySelectorAll('section');
        
        if (footer) {
            // Verificar si estamos en la página de changelog
            const isChangelog = window.location.pathname.includes('changelog');
            
            if (isChangelog) {
                footer.id = 'changelog';
            } else {
                // Verificar si hay alguna sección visible que no sea changelog
                const visibleSection = Array.from(sections).find(section => 
                    !section.classList.contains('hidden') && section.id !== 'changelog'
                );
                
                // Si no hay sección visible, establecer 'faq' como valor por defecto
                footer.id = visibleSection ? 'faq' : 'faq';
            }
        }
      });
    // Manejador de clicks para los enlaces de navegación
    document.querySelectorAll('nav a').forEach(link => {
        link.addEventListener('click', (e) => {
            const href = link.getAttribute('href');
            if (href.includes('changelog')) {
                handleSectionVisibility('changelog');
            } else {
                handleSectionVisibility('other');
            }
        });
    });

    // Mantener el resto del código existente
    hamburgerMenu.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
        hamburgerMenu.classList.toggle('open'); 
    });

    document.addEventListener('click', (event) => {
        if (!hamburgerMenu.contains(event.target) && !mobileMenu.contains(event.target)) {
            mobileMenu.classList.add('hidden');
            hamburgerMenu.classList.remove('open'); 
        }
    });

    navigationLinks.forEach((link) => {
        link.addEventListener('click', () => {
            mobileMenu.classList.add('hidden');
            hamburgerMenu.classList.remove('open');
        });
    });

    document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a span[aria-label]")

    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList = "-z-10 absolute bottom-0 h-full bg-gradient-to-br from-gray-600/40 via-slate-700/40 to-gray-600/40  transition-all duration-300 w-full left-0 rounded-lg"
            } else {
              item.classList = "-z-10 absolute left-1/2 bottom-0 w-0 h-full bg-gradient-to-br from-gray-600/40 via-slate-700/40 to-gray-600/40 transition-all duration-300 group-hover:w-full group-hover:left-0 rounded-lg"
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })


// Cambiar header en el futuro: cambiar el estilo de header para dar el efecto de que se compacta



</script>
